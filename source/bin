#!/bin/bash
echo
echo -e -n "\e[0;33mWelcome to HathoutDB v.1\n"
echo
echo -e -n "\e[0;31m**For more info:"
echo -e -n "\e[0;32m \$man HathoutDB"

echo
echo -e -n "\e[0;31m**You can exist HathoutDB safely by hitting CTRL-D\n"
# echo -e -n "\e[0;32mHathoutDB>"
# read cmd
cmd=0
currentdb=''


while [[ $cmd != $EOF ]]
do
	echo -e -n "\e[0;32mHathoutDB>"
	read cmd
	if [[ $cmd == "man HathoutDB" ]]; then
			# echo "Man page"
			./manPage


####################################DEALING WITH DATABASES######################################
#CREATE DATABASE DatabaseName: To create a new database if not exist
	elif [[ $cmd =~ ^CREATE.DATABASE.[a-z|A-Z]+ ]]; then
			echo Creating db..
			dbNameTemp="${cmd//CREATE /}"
			dbName="${dbNameTemp//DATABASE /}"
			./createdbs $dbName

#To Start working with a DB use the command: USE DatabaseName
#USE DatabaseName: To start working on a specific database with CRUD operations.
	elif [[ $cmd =~ ^USE.[a-z|A-Z]+ ]]; then
			dbName="${cmd//USE /}"
			if [ ! -d "../dbs/$dbName" ]; then
					echo There is no database $dbName exist.
			else
					currentdb=$dbName
					echo using database $currentdb
			fi
#SHOW DATABASES: to list all existing databases.
	elif [[ $cmd == "SHOW DATABASES" ]]; then
			./createdbs show

#DROP DATABASE databaseName: To drop a database from the existing databases.
	elif [[ $cmd =~ ^DROP.DATABASE.[a-z|A-Z]+ ]]; then
				dbNameTemp="${cmd//DROP /}"
				dbName="${dbNameTemp//DATABASE /}"
				./createdbs drop $dbName

#CURRENT DATABASE: To specify the currently in use database.
elif [[ $cmd == "CURRENT DATABASE" ]]; then
				if [[ !  -z  $currentdb ]]; then
							echo Your are using: $currentdb
				else
							echo "You should type \$ USE DatabaseName to deal with a certain db."
				fi
#########################################End DEALING WIH DATABSES##############################################



#######################################Dealing with Tables################################
# CREATE TABLE TableName: To create a new table.
	elif [[ $cmd =~ ^CREATE.TABLE.[a-z|A-Z]+ ]]; then
			echo creating table..
			tableNameTemp="${cmd//CREATE /}"
			tableName="${tableNameTemp//TABLE /}"
			if [[ !  -z  $currentdb ]]; then
						./createTables create $currentdb $tableName
			else
						echo "You should type \$ USE dbName before creating a table"
		  fi

#SHOW TABLES: To list all collection names
	elif [[ $cmd == "SHOW TABLES" ]]; then
			if [[ !  -z  $currentdb ]]; then
						./createTables show $currentdb
			else
						echo "You should type \$USE DatabaseName before displaying it's tables."
		  fi

#DROP TABLE table_name: To drop a table from an existing and in use database.
	elif [[ $cmd =~ ^DROP.TABLE.[a-z|A-Z]+ ]]; then
				echo dropping table..
				tableNameTemp="${cmd//DROP /}"
				tableName="${tableNameTemp//TABLE /}"
				if [[ !  -z  $currentdb ]]; then
								./createTables drop $currentdb $tableName
				else
								echo "You should type \$ USE dbName before dropping a table"
				 fi

#STRACTURE TABLE table_name: To set the stracture needed for a specific table.
	elif [[ $cmd =~ ^STRACTURE.TABLE.[a-z|A-Z]+ ]]; then
					echo stracturing table..
					tableNameTemp="${cmd//STRACTURE /}"
					tableName="${tableNameTemp//TABLE /}"
					if [[ !  -z  $currentdb ]]; then
								./stractureTables $currentdb $tableName
					else
								echo "You should type \$ USE dbName before stracturing a table"
				 	fi
#########################################End DEALING WIH TABLES##########################################


#######################################Dealing with Data INSERTing and UPDATING##########################
#INSERT INTO TABLE table_name: To insert data into specific table.
	elif [[ $cmd =~ ^INSERT.INTO.[a-z|A-Z]+ ]]; then
				# echo inserting data into table..
				tableNameTemp="${cmd//INSERT /}"
				tableNameTemp="${tableNameTemp//INTO /}"
				tableName="${tableNameTemp//TABLE /}"
				if [[ !  -z  $currentdb ]]; then
									./insertingData $currentdb $tableName
				else
							echo "You should type \$ USE dbName before inserting data into table"
			 	fi

#UPDATE DATA INTO table_name: To update data into specific table.
elif [[ $cmd =~ ^UPDATE.DATA.[a-z|A-Z]+ ]]; then
				tableNameTemp="${cmd//UPDATE /}"
				tableNameTemp="${tableNameTemp//DATA /}"
				tableName="${tableNameTemp//INTO /}"
				# echo $tableName to upd
				if [[ !  -z  $currentdb ]]; then
								./updatingData $currentdb $tableName
				else
								echo "You should type \$ USE dbName before updating data into table"
			 	fi

#DELETE DATA FROM table_name: To delete specific data row from specific table.
elif [[ $cmd =~ ^DELETE.DATA.[a-z|A-Z]+ ]]; then
				tableNameTemp="${cmd//DELETE /}"
				tableNameTemp="${tableNameTemp//DATA /}"
				tableName="${tableNameTemp//FROM /}"
				if [[ !  -z  $currentdb ]]; then
								./deletingData $currentdb $tableName
				else
								echo "You should type \$ USE dbName before updating data into table"
			 	fi


#SELECT DATA FROM table_name: To display specific row of data or all the table from specific table.
elif [[ $cmd =~ ^SELECT.DATA.[a-z|A-Z]+ ]]; then
				tableNameTemp="${cmd//SELECT /}"
				tableNameTemp="${tableNameTemp//DATA /}"
				tableName="${tableNameTemp//FROM /}"
				if [[ !  -z  $currentdb ]]; then
								./selectingData $currentdb $tableName
				else
								echo "You should type \$ USE dbName before updating data into table"
			 	fi

#######################################Dealing with Data################################
elif [[ $cmd == $EOF ]]; then
		echo
		echo -e -n "\e[0;31mThank you for using HathoutDB\n"
else
		echo -e -n "\e[0;31mNot a HathoutDB command\n"
fi
done
echo "Bye Bye"
