#!/bin/bash

function dataChecker {
			predefinedDataType=$(head -1 $2 | cut -d ':' -f$3 | awk -F "-" 'BEGIN { RS = ":" } {print $2}')
			if [[ "$1" = '' ]]; then
				echo 0
			elif [[ "$1" = -?(0) ]]; then
				echo 1
			elif [[ "$1" = ?(-)+([0-9])?(.)*([0-9]) ]]; then
				if [[ $predefinedDataType == Integer ]]; then
					echo 0
				else
					echo 0
				fi
			else
				if [[ $predefinedDataType == Integer ]]; then
					echo 1
				else
					echo 0
				fi
			fi
}
function sizeChecker {
			predefinedSize=$(head -1 $2 | cut -d ':' -f$3 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
			if [[ "${#1}" -le $predefinedSize ]]; then
				echo 0
			else
				echo 1
			fi
}


# ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
if ! [[ -f "../dbs/$1/$2" ]]; then
  		echo Table $2 doesn\'t exist
else
			# Reading the first line of the file to check if there is a table stracture
			read -r line < "../dbs/$1/$2"
			if [[ ${line} == '' ]]; then
						echo ">There is no stracture for table $2."
						echo ">Use the following command to stracture your table."
						echo "\$ STRACTURE TABLE $2"
						echo
			else
		      echo \> Enter a value for the primary key which named \"$(head -1 "../dbs/$1/$2" | cut -d ':' -f1 |\
		      awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" and has a/an $(head -1 "../dbs/$1/$2"\
		      | cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $2}') type and size equal $(head -1 "../dbs/$1/$2"\
		      | cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
		      read
		      dataCheckerFlag=$(dataChecker "$REPLY" "../dbs/$1/$2" 1)
		      sizeCheckerFlag=$(sizeChecker "$REPLY" "../dbs/$1/$2" 1)
		      primaryKeyChecker=$(cut -d ':' -f1 "../dbs/$1/$2" | awk '{if(NR != 1) print $0}' | grep -x -e "$REPLY")
		      if [[ "$REPLY" == '' ]]; then
		        echo Please Enter a value
		      elif [[ "$dataCheckerFlag" == 1 ]]; then
		        echo Invalid Entry
		      elif [[ "$sizeCheckerFlag" == 1 ]]; then
		        echo Invalid Entry
		      elif ! [[ "$primaryKeyChecker" == '' ]]; then
		        echo This primary key is already in use
		      else
		        echo -n "$REPLY" >> "../dbs/$1/$2"
		        echo -n ':' >> "../dbs/$1/$2"
		        numOfColums=$(head -1 "../dbs/$1/$2" | awk -F: '{print NF}')
		        #number of coloums
		        for (( i = 2; i <= numOfColums; i++ )); do
		              insuringDataFlag=true
		              while $insuringDataFlag ; do
		                echo Enter a value for the column \"$(head -1 ../dbs/$1/$2 | cut -d ':' -f$i |\
		                awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" of type $(head -1 "../dbs/$1/$2" | cut -d ':' -f$i |\
		                awk -F "-" 'BEGIN { RS = ":" } {print $2}') and size $(head -1 "../dbs/$1/$2" | cut -d ':' -f$i |\
		                awk -F "-" 'BEGIN { RS = ":" } {print $3}')
		                read
		                dataCheckerFlag=$(dataChecker "$REPLY" "../dbs/$1/$2" "$i")
		                sizeCheckerFlag=$(sizeChecker "$REPLY" "../dbs/$1/$2" "$i")

		                if [[ "$dataCheckerFlag" == 1 ]]; then # if primary key exist
		                  echo Invalid entry value.
		                elif [[ "$sizeCheckerFlag" == 1 ]]; then
		                  echo Invalid entry size.
		                else # entry is valid
		                  if [[ i -eq $numOfColums ]]; then
		                    echo "$REPLY" >> "../dbs/$1/$2"
		                    insuringDataFlag=false
		                    echo Entry inserted successfully
		                  else
		                    echo -n "$REPLY": >> "../dbs/$1/$2"
		                    insuringDataFlag=false
		                  fi
		                fi
		              done
		        done
      fi
	fi
fi
