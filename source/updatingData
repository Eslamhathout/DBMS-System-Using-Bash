#!/bin/bash




function dataChecker {
			predefinedDataType=$(head -1 $2 | cut -d ':' -f$3 | awk -F "-" 'BEGIN { RS = ":" } {print $2}')
			if [[ "$1" = '' ]]; then
				echo 0
			elif [[ "$1" = -?(0) ]]; then
				echo 1
			elif [[ "$1" = ?(-)+([0-9])?(.)*([0-9]) ]]; then
				if [[ $predefinedDataType == Integer ]]; then
					echo 0
				else
					echo 0
				fi
			else
				if [[ $predefinedDataType == Integer ]]; then
					echo 1
				else
					echo 0
				fi
			fi
}
function sizeChecker {
			predefinedSize=$(head -1 $2 | cut -d ':' -f$3 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
			if [[ "${#1}" -le $predefinedSize ]]; then
				echo 0
			else
				echo 1
			fi
}

echo "Updating data in database $1 and table $2"

# #Getting the first 3 Lines
# l1=$(sed  '1q;d' "../dbs/$1/$2")
# l2=$(sed  '2q;d' "../dbs/$1/$2")
# l3=$(sed  '3q;d' "../dbs/$1/$2")


if ! [[ -f "../dbs/$1/$2" ]]; then
		echo Table $2 doesn\'t exist
else
		#Getting the first 3 Lines
		l1=$(sed  '1q;d' "../dbs/$1/$2")
		l2=$(sed  '2q;d' "../dbs/$1/$2")
		l3=$(sed  '3q;d' "../dbs/$1/$2")
		# Reading the first and second lines of the file to check if there is a table stracture and data
		if [ "$l1" == '' ] && [ "$l2" == '' ] ; then
						echo ">Table $2 either does not have a stracure or data."
						echo ">Use the following commands to stracture your table and insert data."
						echo "\$ STRACTURE TABLE $2" 'then' "\$ INSERT DATA INTO TABLE $2"
		else

						echo \>Enter a value for PK \"$(head -1 "../dbs/$1/$2" | cut -d ':' -f1 |\
						awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" which should of type $(head -1 "../dbs/$1/$2"\
						| cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $2}'), and size $(head -1 "../dbs/$1/$2"\
						| cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')
						read
						linenum=$(cut -d ':' -f1 "../dbs/$1/$2" | sed '1d'\
						| grep -x -n -e "$REPLY" | cut -d':' -f1)

						if [[ "$REPLY" == '' ]]; then
							echo no entry
						elif [[ "$linenum" = '' ]]; then
							echo
							echo ">This primary key doesn't exist or created"
						else
							let linenum=$linenum+1
							num_col=$(head -1 "../dbs/$1/$2" | awk -F: '{print NF}')
							echo "The data on the same row are:"
							for (( i = 2; i <= num_col; i++ )); do
									echo \"$(head -1 ../dbs/$1/$2 | cut -d ':' -f$i | awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" : $(sed -n "${linenum}p" "../dbs/$1/$2" | cut -d: -f$i)
							done
							echo
							echo Table $2 coloums are:
							option=$(head -1 ../dbs/$1/$2 | awk 'BEGIN{ RS = ":"; FS = "-" } {print $1}')
							echo "$option"
							flag31=true
							while $flag31; do
								echo
								echo "> Which field do you need to update? "
								echo
								read
								if [[ "$REPLY" = '' ]]; then
									echo "Invalid data entry"
									echo "press any key"
									read
								elif [[ $(echo "$option" | grep -x "$REPLY") = "" ]]; then
									echo "No such column in table $2"
								else
									fieldnum=$(head -1 "../dbs/$1/$2" | awk 'BEGIN{ RS = ":"; FS = "-" } {print $1}'\
									| grep -x -n "$REPLY" | cut -d: -f1)
									flag311=true
									while $flag311; do
										if [[ "$fieldnum" = 1 ]]; then
											echo Enter a value for PK \"$(head -1 "../dbs/$1/$2" | cut -d ':' -f1 |\
											awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" which should of type $(head -1 "../dbs/$1/$2"\
											| cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $2}'), and size $(head -1 "../dbs/$1/$2"\
											| cut -d ':' -f1 | awk -F "-" 'BEGIN { RS = ":" } {print $3}')

											read
											dflag=$(dataChecker "$REPLY" "../dbs/$1/$2" 1)
											sflag=$(sizeChecker "$REPLY" "../dbs/$1/$2" 1)
											pk_uflag=$(cut -d ':' -f1 "../dbs/$1/$2" | awk '{if(NR != 1) print $0}' | grep -x -e "$REPLY")

											if [[ "$REPLY" == '' ]]; then
												echo "Invalid data entry"
											elif [[ "$dflag" == 1 ]]; then # if primary key exist
												echo "Invalid data entry"
											elif [[ "$sflag" == 1 ]]; then
												echo "Invalid entry size"
											elif ! [[ "$pk_uflag" == '' ]]; then
												echo "This pk is already in use"
											else # primary key is valid
												awk -v fn="$fieldnum" -v rn="$linenum" -v nv="$REPLY"\
												'BEGIN { FS = OFS = ":" } { if(NR == rn)	$fn = nv } 1' "../dbs/$1/$2"\
												> "../dbs/$1/$2".new && rm "../dbs/$1/$2" && mv "../dbs/$1/$2".new "../dbs/$1/$2"
												flag311=false
												flag31=false
											fi
										else
											flag311=true
											while $flag311 ; do
												echo Enter a value for column \"$(head -1 ../dbs/$1/$2 | cut -d ':' -f$fieldnum |\
												awk -F "-" 'BEGIN { RS = ":" } {print $1}')\" which should of type $(head -1 "../dbs/$1/$2" | cut -d ':' -f$fieldnum |\
												awk -F "-" 'BEGIN { RS = ":" } {print $2}'), and size $(head -1 "../dbs/$1/$2" | cut -d ':' -f$fieldnum |\
												awk -F "-" 'BEGIN { RS = ":" } {print $3}')
												read
												dflag=$(dataChecker "$REPLY" "../dbs/$1/$2" "$fieldnum")
												sflag=$(sizeChecker "$REPLY" "../dbs/$1/$2" "$fieldnum")

												if [[ "$dflag" == 1 ]]; then # if primary key exist
													echo "Invalid data entry"
												elif [[ "$sflag" == 1 ]]; then
													echo "Invalid entry size"
												else # entry is valid
													awk -v fn="$fieldnum" -v rn="$linenum" -v nv="$REPLY"\
													'BEGIN { FS = OFS = ":" } { if(NR == rn)	$fn = nv } 1' "../dbs/$1/$2"\
													> "../dbs/$1/$2".new && rm "../dbs/$1/$2" && mv "../dbs/$1/$2".new "../dbs/$1/$2"
													flag311=false
													flag31=false
												fi
											done
										fi
									done
								fi
							done
						fi
						echo press any key
					read
		fi
fi
